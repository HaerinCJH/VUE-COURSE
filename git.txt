使用git

下载：

     https://git-scm.com/

配置:

     设置仓库用户名
     name  :git config --global user.name "MoMu"

     设置仓库邮箱
     email :git config --global user.email "haerincjh@outlook.com"

使用：

     git status
        - 查看当前仓库的状态

     git init
        - 初始化仓库

     刚刚添加到项目中的文件处于未跟踪状态

        未跟踪 --> 暂存
            git add <filename> 将文件切换到暂存状态 
            git add * 将所有的文件切换到暂存状态

        暂存 --> 未修改
            git commit -m "xxx" 将暂存的文件存储到仓库中
            git commit -a -m "xxx" 提交所有已修改的文件(未跟踪的文件不会提交)

        未修改 --> 修改
            修改代码后，文件会变成修改状态

常用命令：

     1.重置文件
     git restore <filename> 重置文件
     git restore --staged <filename> 将文件从暂存状态取消

     2.删除文件
     git rm <filename> 删除文件
     git rm <filename> -f 强制删除

     3.移动文件
     git mv from to 移动文件(重命名文件)

     4.日志
     git log


分支

     git在存储文件时，每一次代码的提交都会创建一个与之对应的节点，git就是通过一个一个节点来记录代码的状态。

     节点会构成一个树状结构，树状结构就意味着这个树存在分支，默认情况下仓库就只有一个分支，命名为master。

     在使用git时，可以创建多个分支，分支与分支之间相互独立，在一个分支上修改代码不会影响其他分支。

     1.查看分支
     git branch

     2.创建新的分支
     git branch <branch name>

     3.删除分支
     git branch -d <branch name>

     4.切换分支
     git switch <branch name>

     5.创建并切换分支
     git switch -c <branch name>

     在开发中，都是在自己的分支上编写代码，代码编写完成后，再将自己的分支合并到主分支中

     6.合并分支
           1.先切换到主分支
           git switch master

           2.合并分支
           git merge <branch name>

           3.然后删除分支
           git branch -d <branch name>

     在开发中除了通过merge来合并分支外，还可以通过变基来完成分支的合并

变基(rebase)

     我们通过merge合并分支时，在提交记录中会将所有的分支创建和分支合并的过程全部显示出来，这样当项目复杂时，开发
     过程比较久，必须反复创建、合并、删除分支。这样会使得代码的提交记录变得极为混乱

     原理(变基时发生了什么？)：

            1.当发起变基时，git首先会找到两条分支最近的共同祖先

            2.对比当前分支相对于祖先的历史提交，并且将它们提取出来存储到一个临时文件中

            3.将当前部分指向目标的基底

            4.以当前基底开始，重新执行历史操作
     
     过程：
            
            1.切换到需要变基的分支
            git switch <branch name>

            2.进行变基
            git rebase master

            3.合并分支
            git merge <branch name>

            4.删除分支
            git branch -d <branch name>

     变基和merge对于合并分支来说最终结果都是一样的！但是变基会使得代码的提交记录更整洁更清晰！

     注意！大部分情况下合并和变基是可以互换的，但是分支已经提交给远程仓库，那么这个时候尽量不要使用变基

远程仓库(remote)

     目前对于git的操作都是在本地进行的。但是在开发中需要使用远程仓库进行开发。远程的git仓库和本地的没有本质上的区别，不同点
     在于远程仓库可以被多人同时访问使用，方便我们协同开发。在实际开发中，git的服务器通常由公司搭建内部使用或者是购买一些公共
     的私有git服务器。学习阶段直接使用一些开放的公共git仓库。目前常用的库有两个：GitHub和Gitee(码云)

     将本地库上传到GitHub:

          //git remote add <remote name>远程库的名字 <url>仓库的地址
          git remote add origin https://github.com/HaerinCJH/git-demo.git

          //修改分支的名字为main
          git branch -M main

          //git push 将代码上传到服务器上 origin远程库的名字要与上面一致 main为本地分支名字与上面一致
          git push -u origin main

     将本地库上传到Gitee:

          //连接两个仓库修改远程库的名字
          git remote add gitee git@gitee.com:cangod123/2131.git
          git push -u gitee "main"


            